#include "main.h"

UART_HandleTypeDef huart2;

// Define GPIO pins for stepper control
#define STEP1_PIN GPIO_PIN_0
#define DIR1_PIN GPIO_PIN_1
#define ENABLE1_PIN GPIO_PIN_2

#define STEP2_PIN GPIO_PIN_3
#define DIR2_PIN GPIO_PIN_4
#define ENABLE2_PIN GPIO_PIN_5

#define STEP3_PIN GPIO_PIN_6
#define DIR3_PIN GPIO_PIN_7
#define ENABLE3_PIN GPIO_PIN_8

#define STEP4_PIN GPIO_PIN_9
#define DIR4_PIN GPIO_PIN_10
#define ENABLE4_PIN GPIO_PIN_11

#define STEP5_PIN GPIO_PIN_12
#define DIR5_PIN GPIO_PIN_13
#define ENABLE5_PIN GPIO_PIN_14

#define STEP6_PIN GPIO_PIN_15
#define DIR6_PIN GPIO_PIN_0
#define ENABLE6_PIN GPIO_PIN_1

#define FAN_PIN GPIO_PIN_2

#define STEP_GPIO_PORT GPIOA
#define FAN_GPIO_PORT GPIOB

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
void stepper_control(GPIO_TypeDef* GPIOx, uint16_t step_pin, uint16_t dir_pin, uint16_t enable_pin, uint8_t steps, uint8_t direction);
void fan_control(uint8_t state);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART2_UART_Init();

    // Enable stepper motor drivers
    HAL_GPIO_WritePin(STEP_GPIO_PORT, ENABLE1_PIN | ENABLE2_PIN | ENABLE3_PIN | ENABLE4_PIN | ENABLE5_PIN | ENABLE6_PIN, GPIO_PIN_RESET);

    while (1) {
        // Control the stepper motors
        stepper_control(STEP_GPIO_PORT, STEP1_PIN, DIR1_PIN, ENABLE1_PIN, 200, 1);
        stepper_control(STEP_GPIO_PORT, STEP2_PIN, DIR2_PIN, ENABLE2_PIN, 200, 0);
        stepper_control(STEP_GPIO_PORT, STEP3_PIN, DIR3_PIN, ENABLE3_PIN, 200, 1);
        stepper_control(STEP_GPIO_PORT, STEP4_PIN, DIR4_PIN, ENABLE4_PIN, 200, 0);
        stepper_control(STEP_GPIO_PORT, STEP5_PIN, DIR5_PIN, ENABLE5_PIN, 200, 1);
        stepper_control(STEP_GPIO_PORT, STEP6_PIN, DIR6_PIN, ENABLE6_PIN, 200, 0);

        HAL_Delay(1000); // Wait for 1 second

        // Toggle fan state
        fan_control(1);
        HAL_Delay(500);
        fan_control(0);
        HAL_Delay(500);
    }
}

void stepper_control(GPIO_TypeDef* GPIOx, uint16_t step_pin, uint16_t dir_pin, uint16_t enable_pin, uint8_t steps, uint8_t direction) {
    // Set direction
    HAL_GPIO_WritePin(GPIOx, dir_pin, direction ? GPIO_PIN_SET : GPIO_PIN_RESET);
    
    for (uint8_t i = 0; i < steps; i++) {
        // Generate a pulse on the step pin
        HAL_GPIO_WritePin(GPIOx, step_pin, GPIO_PIN_SET);
        HAL_Delay(1);  // Adjust delay as needed
        HAL_GPIO_WritePin(GPIOx, step_pin, GPIO_PIN_RESET);
        HAL_Delay(1);  // Adjust delay as needed
    }
}

void fan_control(uint8_t state) {
    HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_PIN, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
}

void SystemClock_Config(void) {
    // System Clock Configuration
    // This function is auto-generated by STM32CubeMX
    // ...
}

static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    // Configure GPIO pins for Stepper Motor control
    GPIO_InitStruct.Pin = STEP1_PIN | DIR1_PIN | ENABLE1_PIN | STEP2_PIN | DIR2_PIN | ENABLE2_PIN |
                          STEP3_PIN | DIR3_PIN | ENABLE3_PIN | STEP4_PIN | DIR4_PIN | ENABLE4_PIN |
                          STEP5_PIN | DIR5_PIN | ENABLE5_PIN | STEP6_PIN | DIR6_PIN | ENABLE6_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(STEP_GPIO_PORT, &GPIO_InitStruct);

    // Configure GPIO pin for Fan control
    GPIO_InitStruct.Pin = FAN_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(FAN_GPIO_PORT, &GPIO_InitStruct);

    // Default state
    HAL_GPIO_WritePin(STEP_GPIO_PORT, STEP1_PIN | DIR1_PIN | ENABLE1_PIN | STEP2_PIN | DIR2_PIN | ENABLE2_PIN |
                      STEP3_PIN | DIR3_PIN | ENABLE3_PIN | STEP4_PIN | DIR4_PIN | ENABLE4_PIN |
                      STEP5_PIN | DIR5_PIN | ENABLE5_PIN | STEP6_PIN | DIR6_PIN | ENABLE6_PIN, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(FAN_GPIO_PORT, FAN_PIN, GPIO_PIN_RESET);
}

static void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart2) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    // User can add his own implementation to report the HAL error return state
    __disable_irq();
    while (1) {
    }
}
